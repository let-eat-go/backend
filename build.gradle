import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.epages.restdocs-api-spec' version '0.18.4'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Springboot Starter
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.1'
    // Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // for stomp broker relay
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'

    // for websocket security
//    implementation 'org.springframework.security:spring-security-messaging'

    // rabbitmq
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // Driver
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // restDocs & swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'

    // coolsms
    implementation 'net.nurigo:sdk:4.3.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // aws s3
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    // for validate mime type
    implementation 'org.apache.tika:tika-core:2.9.1'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

// ------ Querydsl 설정 ------------
def generatedQueryDsl = 'src/main/generated'

sourceSets {
    main.java.srcDirs += [generatedQueryDsl]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generatedQueryDsl))
}

clean.doLast {
    file(generatedQueryDsl).deleteDir()
}
// ------------------------------

tasks.named('test') {
    useJUnitPlatform()
}

// --------restdocs, swagger 설정 ------------
openapi3 {
    servers = [
            { url = "http://localhost:8080" },
            { url = "https://backend-dev.leteatgo.site" }
    ]

    title 'Let-Eat-Go API'
    description 'Spring REST Docs with SwaggerUI'
    version '0.0.1'
    format = "yaml"
    outputFileNamePrefix = "leteatgo-api"
    outputDirectory = 'build/resources/main/static/docs'
}

// GenerateSwaggerUI 태스크가, openapi3 task 를 의존하도록 설정
tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
    delete file('src/main/resources/static/docs')
    mkdir 'src/main/resources/static/docs'
    copy {
        from 'build/resources/main/static/docs'
        into 'src/main/resources/static/docs'
    }
}

bootJar {
    dependsOn(':openapi3')
}
// ----------------------------------
